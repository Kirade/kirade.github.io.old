---
layout: "post"
title: "[Django] 쿼리셋은 언제 계산되는가?"
date: "2018-02-20 00:12"
category: Django
tags: Django QuerySet
---

## Background
> 이 내용은 장고 공식문서의 QuerySet API 의 일부분을 정리한 내용입니다.

---
## Study
장고에서는 QuerySet에 대한 Lazy Evaluation을 시행한다. 이 말뜻은 실제 값이 필요하기 이전까지 최대한 데이터베이스에 대한 쿼리를 지연시킨다는 의미이다. 이를 통해 불필요하게 중복되는 쿼리를 줄일 수 있다.

이를 잘 활용하기 위해서는 언제 장고가 QuerySet을 실제 모델 인스턴스로 evaluate 하는지 알 필요성이 있다.

### 언제 쿼리셋이 계산되는가?

내부적으로, 쿼리셋은 실제 데이터베이스에 쿼리하지 않고 만들어지거나, 필터링되거나, 잘려지거나, 전달된다. 즉 쿼리셋을 실제 계산하기 전까지는 어떤 데이터베이스 활동이 없다.

다음과 같은 방식으로 쿼리셋의 실제 인스턴스들을 얻어올 수 있다.

1. Iteration
쿼리셋은 순회가능한 객체이다. 그래서 가장 처음 순회를 시작할 때, 데이터베이스에 쿼리를 한다. 다음은 예시이다.

```python
for e in Entry.objects.all():
    print(e.headline)
```

노트 : 단지 결과가 존재하는지에 대한 여부를 알아내기 위해 이와 같은 코드를 작성하는 것은 비효율적이다. `exists()`를 사용하는 것이 더 바람직하다.

2. Slicing
쿼리셋은 파이썬 배열-slicing 문법을 활용할 수 있다. Slicing은 대개 전과 같이 계산되지 않은 쿼리셋을 반환한다. 하지만, Slicing 구문의 step 인자가 주어지게 된다면 계산된 리스트를 반환한다. 또한, 이미 계산된 쿼리셋을 Slicing하는것 또한 계산된 리스트를 반환하게 된다.

또 알아두어야 할 것은, 계산되지 않은 쿼리셋을 slicing하면 전과 같이 계산되지 않은 쿼리셋을 만들어내지만, 이를 더 수정하는 작업은 허용되지 않는다. 왜냐하면 이 작업을 SQL로 바꾸는 것은 명확한 의미를 가지지 않고 SQL로 바꾸기 쉽지 않기 때문이다.

3. Pickling / Caching
결과값이 데이터베이스로부터 읽어오게 된다.

4. repr()
`repr()`메서드를 호출하게 되면 쿼리를 수행하여 결과값을 가져오게 된다. 이는 파이썬 인터프리터와 상호작용의 편의성을 위함이다. 실제로 인터프리터로 쿼리셋을 입력하면 결과를 볼 수 있다.

5. len()
쿼리셋에 대한 길이를 알기 위해 이 메서드를 호출하면, 쿼리를 수행하고 계산 결과로 나온 인스턴스 리스트에 대한 길이를 반환한다..

노트 : 단순히 레코드의 갯수를 알기 위해서라면 `len()` 보다 `count()`를 사용하는 것이 더 효율적이다.

6. list()
쿼리셋을 리스트 메서드의 인자로 호출하면 계산한 결과를 반환한다.

```python
entry_list = list(Entry.objects.all())
```

7. bool()
참 거짓을 반환하는 `bool()`메서드는 쿼리셋을 계산한 결과에 하나 이상의 레코드가 존재한다면 참을 반환한다. 그렇지 않으면 거짓을 반환한다.

```python
if Entry.objects.filter(headline="Test"):
   print("There is at least one Entry with the headline Test")
```

---
## Reference
* [QuerySet API - docs](https://docs.djangoproject.com/en/2.0/ref/models/querysets/)
