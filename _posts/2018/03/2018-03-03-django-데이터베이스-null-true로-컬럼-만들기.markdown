---
layout: "post"
title: "[Django] 데이터베이스 Null=True로 컬럼 만들기"
date: "2018-03-03 17:00"
category: Django
tags: Django Database Postgres
---

## Background

장고를 사용하면서 많은 데이터를 가지고 있는 테이블에 새로운 컬럼을 추가할 때 발생한 이슈를 정리합니다.

---
## Study

### 상황
데이터베이스 테이블에 새로운 모델 인스턴스가 추가될 때 만들어지는 ID값을 이용해 만들어진 값을 새로 추가하는 모델 필드에 추가하려고 한다.

## 문제
1. ID 필드의 값은 데이베이스에 쿼리를 하고 나서 생성되는 값이기 때문에, 장고 어플리케이션단에서 ID값을 미리 알 수 없다. 따라서, 데이터베이스에 접근하여 저장한 뒤 ID에 접근하여 이를 토대로 새로운 필드에 들어갈 값을 만들어야 한다.

2. 실제 서비스 되고 있는 서비스이기 때문에, 데이터베이스에 새로운 필드를 추가하거나 데이터를 갱신할 때, 테이블 락이 걸려 다른 서비스에 문제가 발생할 수 있다.

## 해결
가장 먼저, 새로운 컬럼을 만들 때에는 장고 모델 클래스 내의 필드로 정의한 내용을 토대로 마이그레이션 파일을 만들고 마이그레이션을 진행하게 된다. 이 때, 새롭게 추가되는 필드에 `null=True` 옵션을 주고 추가한다. 여기에는 몇 가지 이유가 있다.

데이터베이스 쪽에서는 `null=True` 옵션으로 인해 필드 내의 '값'을 추가하지 않아도 된다. 따라서 새로운 컬럼을 만드는 작업이 빠르게 진행된다.

또한 로직으로 보자면 새롭게 추가되는 필드는 새로 생성되는 ID필드 값을 통해서 다시 Save되는 필드이다. 따라서 새로운 필드를 생성한 직후에는 그 값을 알 수 없으므로 기본옵션인 `null=False`였다면 오류가 발생할 여지가 있다.

마지막으로 장고 어플리케이션 쪽에서는 `null=False`를 주고 `blank=True` 옵션을 줄 수있다고 생각할 수 있다. 로직에서 당장 할당되지 않는 새로운 필드의 문제점을 보완하는 방법일 수 있다. 하지만, 장고에서의 `blank=True`옵션은 데이터베이스의 데이터베이스의 Null과 유사한 의미의 파이썬의 None을 넘겨주지 않는다. 문자라면 빈 스트링 숫자라면 0을 넘겨준다. 이는 분명히 존재하는 '값'이기 때문에 새로운 필드를 만들고 값을 갱신하는 시간이 오래걸릴 수 있을 뿐더러, 이 후 데이터베이스의 값이 사용될 때, 빈 스트링, 0 이라는 값의 의미가 프로그래머가 의도한 의미와 다를 수 있다는 문제점이 있다.

두 번째 문제는, 많은 데이터가 있는 테이블을 작업할때 발생하는 테이블 락을 줄여야하는 이슈이다. 일반적인 장고의 migration은 한 개의 트랜젝션으로 이루어진다. 따라서, 마이그레이션 내에서 많은 쿼리가 발생하게 된다면 해당 데이터에 접근하지 못하는 테이블 락의 시간이 굉장히 길 것이다.

이를 해결하기 위해서 장고는 마이그레이션 내의 `atomic=False`라는 옵션을 제공한다. 이를 통해 하나의 트랜잭션으로 이루어지는 마이그레이션 파일이 작게 쪼개져서 실행되므로 마이그레이션 중간에도 데이터에 대한 접근이 가능하게 된다.

---
## Reference
* [Add column fast](https://dba.stackexchange.com/questions/60965/has-postgresql-a-fast-add-column-optimization)
