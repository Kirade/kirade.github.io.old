---
layout: "post"
title: "[JS] jQuery 기초"
date: "2018-01-03 20:52"
category: Javascript
tags: Javascript Web jQuery
---

## Background
자바스크립트를 처음 배운뒤, 블로그에 기능을 추가 할 일이 생겨 자바스크립트로 수십줄의 코드를 짜가면서 코딩을 한 적이 있습니다. 몇 시간 코딩 한 뒤에 알게된 사실은 잘 짜여진 자바스크립트 라이브러리를 이용하면 지금까지 했던 작업들을 경제적으로 줄일 수 있다는 점입니다. 이 포스팅에서는 가장 많이 사용되는 jQuery라는 자바스크립트 라이브러리 기초에 대해 정리하겠습니다.

---
## Study
jQuery는 자바스크립트 라이브러리 입니다. 프로그래밍에서 라이브러리란, 자주 사용하는 코드들을 재사용할 수 있는 형태로 만들어 두어 프로그래밍 효율을 높일 수 있도록 만들어 둔 기능들의 집합 정도로 이해할 수 있습니다.

### Install
jQuery를 사용하기 위해서는 소스 파일을 직접 다운받아 웹 서버에 넣는 방법과 CDN을 활용하는 방법이 있습니다.

* 직접 소스코드를 다운받아 사용하는 경우
  - [jQuery](http://jquery.org)에서 소스파일을 다운받습니다.
- CDN을 이용하는 경우
  - [jQuery CDN](http://jquery.com/download/#using-jquery-with-a-cdn)에서 CDN경로를 받아 `<script> </script>`사이에 넣어 사용합니다.

### Basic

* jQuery는 자바스크립트로 코드를 만들 때 보다, 경제적이고 효율적으로 코드를 만들 수 있습니다. 왜냐하면 복잡한 로직들을 미리 정의해 둔 경우가 많기 때문입니다.


* Wrapper
  - 레퍼는 자바스크립트에서 `document.getElementById()`로 엘리먼트를 참조하듯이 jQuery에서 엘리먼트 객체를 참조하기 위한 방법입니다.
  - `jQuery(엘리먼트 오브젝트 | 'CSS스타일 선택자')`와 같은 형태로 엘리먼트를 선택할 수 있습니다.
  - `jQuery(~)` 대신 보통 `$(~)` 형태로 자주 쓰입니다. 하지만 다른 라이브러리에서도 같은 형식의 문법과 겹칠 수 있는 가능성이 있습니다.

* Selector
  - CSS에서 선택자를 활용하여 어떤 엘리먼트에 해당 스타일을 정의할 지 접근하는 방식을 활용합니다. 이는 jQuery의 레퍼 안에서도 활용될 수 있습니다.
  - `$(#example)`, `(.example)` 등

* Chain
  - jQuery의 메서드는 실행될 때 마다, 메서드를 적용한 객체가 반환이 됩니다. 이를 이용하여 연속적으로 해당 객체 혹은 객체를 바꾸어가며 메서드를 활용할 수 있습니다.
  - `$(#example).attr('href','http://example.com').css('display':'block')`

- Event
  - jQuery에서 이벤트는 브라우저에서 발생하는 사건들을 의미합니다. (마우스 이동, 클릭, 키보드 클릭, 로딩 등)
  - 자바스크립트의 이벤트 핸들러와 같이 이벤트 발생 시, 정의해둔 로직을 실행할 수 있습니다.
  - 이벤트 설치
    - `$(#example).bind("click", eventHandler);`
  - 이벤트 제거
    - `$(#example).unbind("click", eventHandler);`
  - 이벤트 헬퍼
    - `bind`, `unbind`로 일일히 이벤트의 이름과 핸들러를 지정하는 방식이 아닌 이벤트 헬퍼 메서드로 인자로 이벤트 핸들러만 주면 이벤트를 추가한다
    - `$(#example).click(eventHandler);`

- Ajax
  - 자바스크립트를 이용하여 비동기식으로 서버와 통신하는 방식입니다.
  - `$.ajax(settings)`
    - settings 객체에는 다음과 같은 주요 속성이 들어갑니다.
      - url : Ajax 요청을 처리받고 결과를 반환하는 서버의 주소
      - data : 서버에 전송할 데이터, 객체(key - value)
      - dataType : 서버에서 전달 받을 데이터의 타입 ('XML', 'JSON', 'scritp', 'html')
      - type :  서버로 전송하는 방식 ('POST', 'GET')
      - success : Ajax 통신에 성공시 호출되는 이벤트 핸들러
  ```javascript
  $.ajax({
      url : 'http://api.example.com',
      dataType : 'json',
      type : 'POST',
      data : {"name" : "Kirade", "Message" : "Hello World!"},
      success : function(result){
        if(result){
            /*
            logic
            */
        }
      }
  })
  ```

- API
  - jQuery가 제공하는 다양한 API들은 [jQuery API document](api.jquery.com)에서 좋은 예제와 함께 설명을 볼 수있습니다.


---
## Reference
* [생활코딩 - jQuery](https://opentutorials.org/course/53/45)
* [jQuery 공식 홈페이지](https://jquery.com/)
