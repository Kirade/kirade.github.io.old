---
layout: "post"
title: "[Python] Lambda 함수의 사용"
date: "2019-03-26 00:05"
category: python
tags: python
---

## Background
이 글은 Python Tricks The Book 이라는 책 3장에 소개되는 Lambda 함수에 관한 내용을 정리했습니다.

---

## Study

#### 일급 객체

lambda 함수를 이해하기 위해선, 파이썬의 특징 중 하나인 일급 객체에 대한 이해가 필요합니다.

파이썬에서 함수가 일급 객체라는 사실은 파이썬의 중요한 특징 중 하나입니다. 이 때문에 함수를 변수에 할당하거나 다른 함수의 인자로 전달하는 등의 동작이 가능해집니다.

예제 코드를 한 번 살펴보시기 바랍니다.
```python
def yell(text):
  return text.upper()

bark = yell

>>> bark('wow')
WOW
```
`yell`이라는 함수를 정의해두고 `bark`라는 변수에 할당한 뒤, `bark`를 호출하니 `yell` 함수에 정의된 함수가 실행이 되었습니다. 이런 특징들은 파이썬을 활용하여 코드를 작성하는데 있어서 다양하게 활용됩니다.

#### Lambda 함수

Lambda 함수는 lambda 키워드를 사용하여 만든 작은 익명의 함수입니다.

일반적으로 함수를 정의할 때 `def` 키워드를 사용하여 함수를 정의하는데, 이와 동일하게 작동합니다. 또한 함수 객체가 필요할 때마다 즉석에서 사용할 수 있습니다.

예를 들면 다음과 같이 lambda 함수를 사용할 수 있습니다.

```python
add = lambda x, y: x + y
add(5, 3)
8
```

`def`를 이용하여 정의한 다음 코드 블럭의 내용과 정확히 같은 동작을 합니다.

```python
def add(x, y):
  return x + y

add(5, 3)
8
```

여기서 알 수 있는 lambda 함수의 특징 중 하나는 익명 함수라는점 입니다. 즉, 익명의 함수로써 함수 객체를 이름에 바인딩할 필요가 없다는 뜻입니다.

이는 함수 객체를 미리 정의해두고 호출할 필요없이, 필요한 순간에 lambda 함수를 정의하고 즉시 평가하여 결과를 얻을 수 있다는 것입니다.

#### Lambda는 언제 사용하는가?
기술적으로는 함수 객체가 제공되어야 할 때 람다 표현식을 사용할 수 있습니다.

가장 흔하게 보는 경우는, 리스트 정렬시 키 함수를 제공할 때 입니다.

```python
l = [(1, 'd'), (3, 'a'), (4, 'e'), (7, 'a')]
sorted(l, key=lambda x: x[1])
```
위와 같이 key를 lambda 함수를 이용하여 각 튜플의 두 번째 값으로 목록을 정렬할 수 있습니다.

#### Labmda 함수를 자제하는 경우
lambda 함수를 사용하는 방식이 유지 보수의 측면에서 좋지 않을 경우에는 지양하는 것이 좋다. 코드를 작성하는 사람 스스로는 편할 수 있겠지만, 다른 사람들에게 가독성이 좋지 못해 유지보수가 어려워 질 수 있습니다.

예를 들면 다음과 같은 경우입니다.
```python
>>> list(filter(lambda x: x % 2 == 0, range(16)))
```


```python
>>> [x for x in range(16) if x % 2== 0]
```
위의 두 가지 방식 모두 동일한 결과를 반환합니다. 하지만 가독성 측면에서 굳이 lambda를 사용하기보단 list comprehension을 사용하여 작성한 것이 더 깔끔하고 가독성이 높아보입니다.

길게보면 코드를 작성할 때 lambda 함수를 써서 타이핑을 줄이는것보다 간결하고 가독성이 높은 코드를 작성하는것이 더 바람직 합니다.
