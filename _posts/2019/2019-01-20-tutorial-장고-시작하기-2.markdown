---
layout: "post"
title: "[Tutorial] 장고 시작하기 #2"
date: "2019-01-20 18:59"
category: Django
tags: Django Python
---

> 이 포스트는 공식 장고문서의 튜토리얼을 번역헀습니다.

## Background

기본적인 투표 어플리케이션을 제작해보면서 튜토리얼을 진행해 나가겠습니다.

튜토리얼은 다음 두 가지 기능을 가지도록 만듭니다.
1. 사람들이 투표를 볼 수 있고, 투표를 할 수 있습니다.
2. 관리자용 사이트가 있어서 직접 표를 추가, 변경, 삭제를 할 수 있습니다.

---

## Study

시작에 앞서 장고가 올바르게 설치되었는지 확인합니다.
> 설치가 되지 않았다면 [이전 포스트](https://kirade.github.io/django/2019/01/20/tutorial-%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/)를 따라서 개발환경을 만들어주세요.

```python
$ python -m django --version
2.1.5
```

### 장고 프로젝트 생성

장고는 간단한 명령어를 통해서 프로젝트 기본 구조를 갖춘 파일들을 생성해 줍니다.

장고를 설치한 가상환경 내에서, 다음 명령어를 실행하여 `mysite`라는 이름의 장고 프로젝트를 생성합니다.
```python
$ django-admin startproject mysite
```

> 여기서, `mysite`는 임의로 지정할 수 있습니다. 단, `django`, `test`와 같은 파이썬이나 장고 내장 키워드와 겹치는 단어는 사용하지 않아야 합니다.

위의 명령어가 실행되면 다음과 같은 구조를 가진 프로젝트가 생성됩니다.
```
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py
```

- 최상위 `mysite` : 프로젝트의 이름입니다. 장고의 작동과 이것의 이름은 상관이 없으므로 이름을 원하는대로 바꾸어도 상관없습니다.

- `manage.py` : 장고의 프로젝트의 여러가지 커맨드라인 기능들을 사용할 수 있도록 해주는 유틸리티 입니다.

- 안쪽의 `mysite` : 프로젝트의 실제 파이썬 패키지 입니다. 따라서 안의 내용을 import 할 경우에 `mysite.urls`와 같이 명시해 주어야합니다.

- `mysite/__init__.py` : 이 파일을 가지고 있는 폴더가 파이썬 패키지임을 명시해주는 파이썬 파일입니다.

- `mysite/settings.py` : 프로젝트를 위한 설정들을 담고있습니다.

- `mysite/wsgi.py` : WSGI 호환 웹서버가 프로젝트를 작동시키기 위한 진입점입니다.

### 개발 서버

장고는 자체적인 개발 서버를 로컬 환경에서 구동시켜줍니다.
```python
$ python manage.py runserver
```

이를 실행하고 웹 브라우저의 `localhost:8000`으로 진입하면 장고 개발서버가 작동하고 있음을 볼 수 있습니다.

### Polls 앱 생성

이번에는 장고 프로젝트를 구성하는 앱을 만들어봅니다.
> 장고의 '프로젝트'는 여러개의 '앱'으로 구성될 수 있습니다.

이전에 설명드렸듯 `manage.py`라는 커맨드라인 유틸리티를 통해 `polls`라는 앱을 장고 프로젝트 안에 생성하겠습니다.
```Python
$ python manage.py startapp polls
```

실행 후에는 다음과 같은 구조의 `polls`라는 앱이 생성된 것을 확인할 수 있습니다.

이런 앱들은 장고 프로젝트를 구성하는 요소로서 여러개의 앱들이 각각 프로젝트의 '어떤 기능'을 담당하고 있다고 볼 수 있습니다.
```Python
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
```

현재까지 생성된 전체 프로젝트의 구조는 다음과 같습니다.

`mysite`라는 프로젝트 아래에, `mysite`, `polls`라는 앱이 보입니다.
```
mysite
├── db.sqlite3
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── polls
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── migrations
    │   └── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py
```

### View 생성

일반적으로 장고는 View를 통해서 받은 요청에 대한 처리를 수행하고 응답합니다.

`polls/views.py`에 다음과같이 입력하여, Index 페이지에 접근시 응답할 내용을 입력해봅니다.
```Python
# polls/views.py
from django.http import HttpResponse


def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")
```

View에 내용을 입력을 완료했습니다. 이제 앞서 만든 View를 호출하기 위한 로직을 추가합니다.
장고에서는 `urls.py`라는 파일을 통해서 URL과 View 함수를 매핑합니다.

기존에는 없었지만 `polls`앱 내에 `urls.py`를 추가합니다.
```
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
```

계속해서 `urls.py`에는 다음과 같은 로직을 작성합니다.
```Python
# polls/urls.py
from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]
```

그 다음으로는 프로젝트 단위의 `urls.py`를 설정합니다.
이 파일은 프로젝트 디렉토리 바로 아래인 `mysite/urls.py`에 위치해 있습니다.
```
# mysite/urls.py
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('polls/', include('polls.urls')),
    path('admin/', admin.site.urls),
]
```

`include` 함수를 통해 여러 앱에 들어있는 `urls.py`를 자유자재로 추가할 수 있습니다.

이제 다음 명령어를 입력하여 개발 서버를 실행시킵니다.
```shell
$ python manage.py runserver
```

이제 웹 브라우저에서 `localhost:8000/polls`로 진입하면, 이전에 만든 View 함수가 실행되는 것을 볼 수 있습니다.


---
## Reference
- [장고 튜토리얼 Part 1](https://docs.djangoproject.com/en/2.1/intro/tutorial01/)
