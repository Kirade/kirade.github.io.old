---
layout: "post"
title: "[Python] 파이썬 개발환경 만들기"
date: "2017-12-09 19:59"
category: Python
tags: Dev Python
---

## Background

파이썬이라는 언어는 직관적이고 간단한 문법으로 많은 개발자들에게 사랑받고, 지속적으로 발전하고 있는 언어입니다. 일반적으로 파이썬은 python2, python3 버전으로 나뉘어져 있습니다. 버전이 다르므로 두 가지 버전은 서로 호환되지 않는 부분이 존재합니다. 따라서 여러 버전을 동시에 개발하는 개발자에게는 어려움이 있습니다.

이런 문제를 해결하여 파이썬 개발에 적절한 개발환경을 만들기 위한 다양한 툴들이 개발되었습니다. 밑에 내용에서 소개할 내용은 파이썬 개발에 도움을 주는 다양한 툴들에 대한 내용입니다.

* [Pyenv](#pyenv)
* [Virtual Environment](#virtual-environment)
* [Autoenv](#autoenv)

---

## Study

# pyenv

>pyenv lets you easily switch between multiple versions of Python. It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.
> -Pyenv repository readme

pyenv는 다양한 파이썬 버전들을 자유자재로 변경가능 할 수 있게 만들어주는 오픈소스 입니다.

#### Characteristics
* 여러 종류의 파이썬을 사용한 프로젝트를 개발할 때 유용하게 사용할 수 있습니다.
* 다양한 버전에서 동시에 명령어를 찾습니다.
* 파이썬이 아닌 오로지 쉘 스크립트로만 제작되었습니다.
* Virtual Environment를 관리하는 기능을 가지고 있습니다.

#### How it works
pyenv는 `PATH`에 들어있는 [shim](https://en.wikipedia.org/wiki/Shim_(computing))을 이용하여 Python 명령어를 가로챈다. 그리고 사용하는 어플리케이션에 지정된 파이썬 버전을 확인하고, 해당 파이썬 버전으로 그 명령어를 보내는 방식으로 동작한다.   

이 동작을 이해하기 위해서는 `PATH`와 `Shims`에 대한 이해가 필요하다.
* [PATH](https://github.com/pyenv/pyenv#understanding-path)
* [Shims](https://github.com/pyenv/pyenv#understanding-shims)

#### Installation
pyenv를 설치하는 방법은 여러가지가 존재한다.

* Automatic Installer  
[pyenv-installer]( https://github.com/pyenv/pyenv-installer)에서 인스톨러를 이용하여 설치한다.

* Basic Github Checkout  
1. 체크아웃을 원하는 경로에 원격 저장소에 있는 내용을 clone한다.
```shell
$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv
```
2. 환경변수 `PYENV_ROOT`를 pyenv를 저장한 받아온 곳으로 지정한다. 그리고 `$PYENV_ROOT/bin`을 `$PATH`에 추가하여 `pyenv`기능을 CLI에서 바로 사용할수 있도록 한다.  
```shell
$ echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
```
3. shims와 자동완성 기능을 활성화 하기위해 `pyenv init`을 쉘에 추가한다.
```shell
$ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.bash_profile
```
4. 쉘을 재시작한다.  
```shell
$ exec "$SHELL"
```
5. 파이썬을 `$(pyenv root)/versions`에 설치한다.  
```shell
$ pyenv install (python-version)
```

* Homebrew on Mac OS X
맥의 Homebrew를 이용하면 간단하게 설치가 가능하다.  
```SHELL
$ brew update
$ brew install pyenv
```

#### Usage
pyenv 명령어는 CLI에서 `pyenv`를 입력하면 입력 가이드가 표시된다.

이 중, 가장 흔히 사용되는 것 두 가지를 소개하면,

아래의 명령어를 통해 현재 로컬에 설치되어있는 다양한 파이썬 버전들을 볼 수 있다.
```SHELL
$ pyenv versions
```

위 명령어를 통해 확인한 버전으로 아래의 `shell`명령어를 통해 원하는 버전으로 현재 디렉토리의 파이썬 버전 변경이 가능하다.
```SHELL
$ pyenv shell [version]
```

---



# virtual environment

virtualenv 패키지는 개발 과정에서 발생하는 의존성 문제를 해결하기 위해 개발되었습니다. 예를들면 어떤 라이브러리 버전1을 사용하는 애플리케이션과 버전2를 사용하는 애플리케이션 동시에 개발해야 할때, 로컬 위치(`/urs/lib/python2.7/site-package`)에 라이브러리는 둘 중에 하나만 설치가 가능합니다. 이런 상황을 해결하기 위한 해결책이 virtualenv입니다.

#### Installation
pip를 이용해 간단하게 설치할 수 있다.
```shell
$ [sudo] pip install virtualenv
```

#### Usage

가상 환경을 만들기 위해서 `[env_name]`에 원하는 프로젝트 이름을 넣고 가상환경을 만든다.
```SHELL
$ virtualenv [env_name]
```

만약, 로컬 설정이 아닌 다른 버전의 파이썬을 설치하고 싶다면 해당 파이썬 버전을 `-p [version]`으로 명시하여 프로젝트를 만들 수 있다.
```SHELL
$ virtualenv -p python3 [env_name]
```

가상 환경을 활성화 시켜야, 실제 로컬이 아닌 설치된 파이썬 버전이 동작한다. 해당 명령어는 설치된 프로젝트안의 activate을 실행하면 된다.
```SHELL
(env_name 디렉토리)$ /bin/activate
```

비활성화 시키기위해서는 다음 명령어를 입력한다.
```SHELL
deactivate
```

---

# autoenv

autoenv 패키지가 하는 역할은 굉장히 단순하지만 귀찮은 작업을 줄여준다.

#### How it works
디렉토리 안에 .env 파일이 있다면 자동으로 해당 파일을 실행시킨다.

#### Installation
pip를 이용해 간단하게 설치할 수 있다.
```SHELL
$ pip install autoenv
```

#### Usage
autoenv를 통해 앞서 설명했던 virtualenv의 activate명령어를 해당 디렉토리에 진입하자마자 자동으로 실행시킬 수 있다.

쉘에 autoenv를 등록한다.
```shell
$ echo '`source ~/.autoenv/actiave.sh` >> ~/.bash_profile'
$ source ~/.bash_profile
```

.env파일을 가상환경 프로젝트 디렉토리에 만든다.
```SHELL
# .env 파일 생성
$ touch .env
$ vim .env

# 파일 안에 가상환경이름과 함께 다음 명령어를 넣고 저장
$ pyenv activate [env_name]
```

이 후, 디렉토리에 진입하면 자동으로 activate명령이 실행되어 가상환경이 시작된다.

---

## Reference
* [Pyenv - Github Repository](https://github.com/pyenv/pyenv)
* [virtualenv](https://pypi.python.org/pypi/virtualenv)
* [autoenv](https://pypi.python.org/pypi/autoenv/)
