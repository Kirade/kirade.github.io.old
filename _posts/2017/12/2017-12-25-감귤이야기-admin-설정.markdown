---
layout: "post"
title: "[감귤이야기] Admin 설정"
date: "2017-12-25 22:52"
category: Django
tags: Web Django 감귤이야기
---

## Background
다른 프레임워크들과는 다르게 장고에서 소개되는 장점 중 한가지는, 장고 기반의 웹 서비스를 제작하면 프레임워크에서 기본적으로 제공하는 admin 앱을 이용하여 정의한 모델들의 데이터를 추가, 수정, 삭제 할 수 있는 깔끔한 인터페이스의 관리자 페이지를 제공한다.

---

## Define Models
App 디렉토리 안에 있는 `models.py`안에 모델을 정의합니다. 모델은 장고에서 사용하는 데이터베이스를 만드는 역할을 합니다. 실제 데이터베이스에 스키마를 정의하는 방식과 같이 장고에서 활용하는 ORM방식은 데이터베이스 한 테이블을 객체로 만들어 관리할 수 있습니다. 정의하는 애트리뷰트 또한 클래스안에 정해진 방식대로 정의하여, 직접 데이터베이스에 쿼리를 전달하는 것보다 간단하고 직관적으로 데이터베이스를 다룰 수 있게 됩니다.

`django.db.models`의 `Model`클래스를 상속받은 것을 기본으로 모델을 제작합니다. 다음 예시에서는 게시판 구현을 위한 `Board`모델과 상품 정보를 위한 `Product`모델을 정의하였습니다.

```python3
from django.db import models
from django.utils import timezone


class Board(models.Model):
    title = models.CharField(max_length=100)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    writer = models.CharField(max_length=20)
    hit = models.IntegerField(default=0)


class Product(models.Model):
    title = models.CharField(max_length=50)
    description = models.TextField()
    price = models.IntegerField(default=0)
    stock_left = models.IntegerField(default=0)
```

해당 모델들을 정의하였다면, 이 모델들을 실제 연결된 데이터베이스에 적용시키는 작업이 필요합니다. 프로젝트 디렉토리에서 다음과 같은 명령어를 입력하면 현재 `models.py`에서 변경된 사항을 장고가 확인하여 변경사항들을 데이터베이스로 갱신하기 위한 사전작업을 합니다.

```shell
$ python manage.py makemigrations
```

이 명령어를 입력하면, `models.py`가 위치한 앱의 `migrations`디렉토리 안에 변경 사항을 데이터베이스에 적용을 위한 정보가 저장됩니다. 이를 실제 데이터베이스에 적용하기 위해 다음 명령어를 입력합니다.

```shell
$ python manage.py migrate
```

이 명령어를 입력하면, 데이터베이스에 아까 만들어둔 migrations디렉토리에 있는 파일들을 기반으로 데이터베이스에 변경사항을 적용합니다. 이후 데이터베이스를 확인하면 새로운 테이블들이 생성된 것들을 볼 수 있습니다.

---

## Admin
모델 클래스들이 정의 되었다면, App 디렉토리 안의 `admins.py`로 이동하여 관리자 페이지에서 데이터베이스의 정보를 보고 추가, 수정, 삭제와 같은 기능을 하기 원하는 클래스들을 등록합니다.

```python3
from .models import Board, Product

admin.site.register(Board)
admin.site.register(Product)

```

관리자 사이트는 `django.contrib.admin`이라는 장고 자체의 앱을 활용하여 작동합니다. 이는 `settings.py`의 `INSTALLED_APPS`에 기본적으로 정의되어 있습니다.

```python3
# settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
```

위와 같이 정의되었다면, 개발 서버 주소 `localhost:8000/admin`과 같은 URL로 관리자 사이트를 접근 할 수 있습니다. 하지만 아직 관리자 사이트 접속을 위한 관리자 계정을 가지고 있지 않습니다. 이를 위해 장고에서는 관리자 계정을 만드는 방법을 제공합니다.

프로젝트 디렉토리에서 다음과 같은 명령어를 입력하면, `superuser` 즉, 관리자 계정을 생성하기 위한 절차가 시작됩니다. 이를 따라 접속할 아이디와 비밀번호 그리고 이메일 주소를 입력합니다.

```shell
$ python manage.py createsuperuser
```

이 명령어를 입력하면, 데이터베이스 테이블 `auth_user`에 입력한 정보를 바탕으로 유저가 등록됩니다. 입력한 정보 이외에 `is_staff`, `is_superuser`, `is_active`를 1로 설정하여 관리자 페이지에 진입할 수 있도록 만듭니다.

이 후, `localhost:8000/admin`에서 등록한 계정으로 로그인 하면 모델들을 관리할 수 있는 관리자 인터페이스를 사용할 수 있습니다.

## Reference
* [모델, 관리자사이트 튜토리얼](https://docs.djangoproject.com/en/2.0/intro/tutorial02/)
